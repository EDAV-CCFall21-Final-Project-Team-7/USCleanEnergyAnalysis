[["index.html", "eia_data_analysis Chapter 1 Introduction", " eia_data_analysis Gabrielle Nyirjesy 11/7/2021 Chapter 1 Introduction "],["data-sources.html", "Chapter 2 Data sources", " Chapter 2 Data sources "],["data-transformation.html", "Chapter 3 Data transformation", " Chapter 3 Data transformation Correcting Date format in Financial Data ## [1] 2 ## # A tibble: 9,036 × 2 ## Day `Cost per barrel` ## &lt;chr&gt; &lt;dbl&gt; ## 1 11/08/2021 82.0 ## 2 11/05/2021 81.2 ## 3 11/04/2021 78.9 ## 4 11/03/2021 80.8 ## 5 11/02/2021 83.9 ## 6 11/01/2021 84.1 ## 7 10/29/2021 83.5 ## 8 10/28/2021 82.8 ## 9 10/27/2021 82.7 ## 10 10/26/2021 85.6 ## # … with 9,026 more rows "],["missing-values.html", "Chapter 4 Missing values 4.1 U.S. Energy Information Administration Data", " Chapter 4 Missing values 4.1 U.S. Energy Information Administration Data 4.1.1 Missing State/Fuel Type Power Generation The EIA.gov dataset was the only dataset with missing values that we used in our analysis. Most of the missing values were absent because most states did not generate electricity for all fuel types. This missing data can show which fuel types are most widely adopted by all U.S. states and which fuel types are less common. 4.1.2 Missing aggregation values "],["results.html", "Chapter 5 Results", " Chapter 5 Results "],["interactive-component.html", "Chapter 6 Interactive component", " Chapter 6 Interactive component "],["conclusion.html", "Chapter 7 Conclusion", " Chapter 7 Conclusion library(tidyverse) library(data.table) library(d3r) library(parcoords) library(GGally) library(janitor) library(egg) library(ggpubr) find_missing_patterns &lt;- function(df, aggregation = &#39;count&#39;){ #find missing patterns missing_patterns &lt;- data.frame(is.na(df)) %&gt;% group_by_all() %&gt;% count(name = &quot;count&quot;, sort = TRUE) %&gt;% ungroup() #create g1 missing_patterns_sums &lt;- df %&gt;% summarise(across(everything(), ~ sum(is.na(.)))) %&gt;% pivot_longer(cols = names(df), names_to=&#39;name&#39;,values_to=&#39;value&#39;) %&gt;% arrange(desc(value)) if (aggregation==&#39;percent&#39;){ total_sum&lt;-length(row.names(df)) missing_patterns_sums$value&lt;- missing_patterns_sums$value*100/total_sum print(total_sum) y_label = &#39;percent rows \\n missing&#39; } else{ y_label = &#39;num rows \\n missing&#39; } column_reorder &lt;- missing_patterns_sums$name g1 &lt;- ggplot(missing_patterns_sums, aes(x=fct_reorder(name, -value), y=value))+ geom_bar(stat=&#39;identity&#39;, fill=&#39;#9eb7ee&#39;) + scale_y_continuous(limits=c(0, max(missing_patterns_sums$value)), expand=c(0,0)) + xlab(&#39;&#39;) + ylab(y_label) + ggtitle(&#39;Missing value patterns&#39;) + theme(panel.border = element_rect(colour = &quot;black&quot;, fill=NA, size=.5), panel.background = element_rect(fill = &quot;white&quot;), panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(), panel.grid.major.y = element_line(color=&#39;darkgray&#39;, size=.1)) + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + theme(aspect.ratio = .25) #Create g3 missing_patterns_count &lt;- missing_patterns %&gt;% mutate_all((as.integer)) %&gt;% adorn_totals(&quot;col&quot;) missing_patterns_count$col &lt;- as.factor(ifelse(missing_patterns_count$Total - missing_patterns_count$count == 0 , 1, 0.5)) missing_patterns_count$id &lt;- row.names(missing_patterns_count) if(aggregation==&#39;percent&#39;){ missing_patterns_count$count&lt;-missing_patterns_count$count*100/sum(missing_patterns_count$count) x_label = &#39;percent rows&#39; } else{ x_label = &#39;row count&#39; } pattern_id &lt;- missing_patterns_count %&gt;% filter(col == 1) %&gt;% select(id) %&gt;% as.character() missing_patterns_count$id &lt;- factor(missing_patterns_count$id) missing_patterns_count$id &lt;- fct_relevel(missing_patterns_count$id, paste(sort(as.integer(levels(missing_patterns_count$id)), decreasing = TRUE))) g3 &lt;- missing_patterns_count %&gt;% #rowid_to_column(var=&quot;pattern&quot;) %&gt;% #mutate(pattern = factor(pattern)) %&gt;% ggplot(aes(y=fct_reorder(id, -desc(count)), x=count)) + geom_bar(stat=&#39;identity&#39;, fill=&#39;#9eb7ee&#39;,aes(alpha = factor(missing_patterns_count$col))) + scale_x_continuous(limits=c(0, max(missing_patterns_count$count)), expand=c(0,0)) + #, breaks = seq(0,max(missing_patterns$count), 5) if want to have the y axis break on 5s ylab(&#39;&#39;) + xlab(y_label) + theme(panel.border = element_rect(colour = &quot;black&quot;, fill=NA, size=.5), panel.background = element_rect(fill = &quot;white&quot;), panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank(), panel.grid.major.y = element_blank(), panel.grid.major.x = element_line(color=&#39;darkgray&#39;, size=.1),) + scale_alpha_manual(values=c(&quot;0.5&quot;=0.5,&quot;1&quot;=1),guide=&quot;none&quot;) + theme(aspect.ratio = 4) #create g2 main_plot_df &lt;- missing_patterns %&gt;% select(-c(count)) %&gt;% as_tibble() %&gt;% rowid_to_column(var=&quot;Y&quot;) %&gt;% gather(key=&quot;X&quot;, value=&quot;Z&quot;, -1) main_plot_df$X &lt;- as.factor(main_plot_df$X) main_plot_df$Y &lt;- as.factor(main_plot_df$Y) main_plot_df$X &lt;- fct_relevel(main_plot_df$X, column_reorder) main_plot_df$Y &lt;- fct_relevel(main_plot_df$Y, rev(levels(main_plot_df$Y))) main_plot_df$Z &lt;- as.factor(ifelse(main_plot_df$Y == pattern_id, .5, main_plot_df$Z)) g2 &lt;- ggplot(main_plot_df, aes(X, Y, fill= Z)) + geom_tile(color=&#39;white&#39;) + theme(legend.position=&quot;none&quot;) + scale_fill_manual(values=c(&#39;#cacaca&#39;, &#39;darkgray&#39;, &#39;#b2a0e1&#39;)) + annotate(&quot;text&quot;,x=length(unique(main_plot_df$X))/2,y=length(unique(main_plot_df$Y))-as.integer(pattern_id)+1,label=&#39;complete cases&#39;) + xlab(&#39;Variable&#39;) + ylab(&#39;Missing Pattern&#39;) + theme_classic() + theme(legend.position = &quot;none&quot;) + theme(axis.text.x = element_text(angle = 45, vjust =1, hjust=1)) + coord_equal() + theme(aspect.ratio = length(row.names(missing_patterns))/(length(names(missing_patterns))-1)) #Arrange graphs blank &lt;- ggplot() + geom_point(aes(1,1), colour=&quot;white&quot;) + theme( plot.background = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank(), panel.background = element_blank(), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank() ) ggarrange(g1,blank,g2,g3,ncol=2,nrow=2,widths = c(16,4),heights=c(1,4)) #return(missing_patterns_count) } #https://www.eia.gov/electricity/data/browser/#/topic/0?freq=M&amp;start=200101&amp;end=202108&amp;ctype=linechart&amp;ltype=pin&amp;pin=&amp;maptype=0 df &lt;- read.csv(&#39;data/raw/monthly_fuel_generation_by_state_full.csv&#39;) df$fuel &lt;- trimws(df$fuel) df$date &lt;- as.Date(df$date) df[is.na(df$thousand_megawatthours),]$thousand_megawatthours &lt;- 0 df$fuel &lt;- gsub(&quot; &quot;, &quot;_&quot;, df$fuel) df$fuel &lt;- gsub(&quot;-&quot;, &quot;_&quot;, df$fuel) way to view the n/a columns for dates test &lt;- df %&gt;% pivot_wider(id_cols = c(state, fuel), names_from= date, values_from = thousand_megawatthours) test ## # A tibble: 744 × 250 ## state fuel `2021-08-01` `2021-07-01` `2021-06-01` `2021-05-01` `2021-04-01` `2021-03-01` `2021-02-01` ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 USA-AL coal 2998. 2961. 2019. 1888. 1584. 2279. 2400. ## 2 USA-AK coal 70.6 83.0 74.7 68.5 41.4 66.3 62.1 ## 3 USA-AZ coal 1600. 1455. 1404. 986. 773. 564. 1169. ## 4 USA-AR coal 2878. 2757. 2056. 1274. 767. 1337. 1936. ## 5 USA-CA coal 25.1 25.6 26.1 24.8 25.9 28.1 25.2 ## 6 USA-CO coal 2334. 2404. 2113. 1401. 1620. 2050. 2224. ## 7 USA-CT coal 0 0 0 -1.12 -1.22 -2.21 115. ## 8 USA-DE coal 55.5 53.4 27.9 -2.53 9.54 74.8 47.7 ## 9 USA-FL coal 2159. 1770. 1918. 1873. 1503. 1518. 1596. ## 10 USA-GA coal 3202. 2767. 2739. 1460. 865. 677. 2718. ## # … with 734 more rows, and 241 more variables: 2021-01-01 &lt;dbl&gt;, 2020-12-01 &lt;dbl&gt;, 2020-11-01 &lt;dbl&gt;, ## # 2020-10-01 &lt;dbl&gt;, 2020-09-01 &lt;dbl&gt;, 2020-08-01 &lt;dbl&gt;, 2020-07-01 &lt;dbl&gt;, 2020-06-01 &lt;dbl&gt;, 2020-05-01 &lt;dbl&gt;, ## # 2020-04-01 &lt;dbl&gt;, 2020-03-01 &lt;dbl&gt;, 2020-02-01 &lt;dbl&gt;, 2020-01-01 &lt;dbl&gt;, 2019-12-01 &lt;dbl&gt;, 2019-11-01 &lt;dbl&gt;, ## # 2019-10-01 &lt;dbl&gt;, 2019-09-01 &lt;dbl&gt;, 2019-08-01 &lt;dbl&gt;, 2019-07-01 &lt;dbl&gt;, 2019-06-01 &lt;dbl&gt;, 2019-05-01 &lt;dbl&gt;, ## # 2019-04-01 &lt;dbl&gt;, 2019-03-01 &lt;dbl&gt;, 2019-02-01 &lt;dbl&gt;, 2019-01-01 &lt;dbl&gt;, 2018-12-01 &lt;dbl&gt;, 2018-11-01 &lt;dbl&gt;, ## # 2018-10-01 &lt;dbl&gt;, 2018-09-01 &lt;dbl&gt;, 2018-08-01 &lt;dbl&gt;, 2018-07-01 &lt;dbl&gt;, 2018-06-01 &lt;dbl&gt;, 2018-05-01 &lt;dbl&gt;, ## # 2018-04-01 &lt;dbl&gt;, 2018-03-01 &lt;dbl&gt;, 2018-02-01 &lt;dbl&gt;, 2018-01-01 &lt;dbl&gt;, 2017-12-01 &lt;dbl&gt;, 2017-11-01 &lt;dbl&gt;, … View which fuel types are missing for each state test2 &lt;- df %&gt;% group_by(state, fuel) %&gt;% summarize(total_thousand_mwh = sum(thousand_megawatthours)) %&gt;% pivot_wider(id_cols = c(state), names_from= fuel, values_from = total_thousand_mwh) test2 ## # A tibble: 50 × 20 ## # Groups: state [50] ## state all_solar coal conventional_hydroelectric natural_gas other other_biomass other_gases `other_renewabl… ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 USA-AK 26.4 13031. 30794. 70596. -22.2 473. 5.40 1846. ## 2 USA-AL 45.2 1125527. 196068. 774498. 1595. 550. 2682. 70816. ## 3 USA-AR 1332. 527850. 67318. 248338. 585. 1411. NA 32714. ## 4 USA-AZ 52434. 750190. 141540. 656740. 2838. 834. NA 48860. ## 5 USA-CA 267832. 29128. 618822. 2129740. 13147. 52140. 32926. 751219. ## 6 USA-CO 11312. 664850. 34529. 258381. 786. 1201. 15.5 117353. ## 7 USA-CT 4281. 41147. 8663. 279473. 14041. 13932. 29.7 16498. ## 8 USA-DE 1180. 49192. NA 78563. 16.8 1283. 5907. 1821. ## 9 USA-FL 24775. 1037854. 4133. 2584653. 64321. 48265. 153. 113078. ## 10 USA-GA 7448. 1185176. 65448. 631582. 1325. 4199. NA 98044. ## # … with 40 more rows, and 11 more variables: petroleum_liquids &lt;dbl&gt;, small_scale_solar_photovoltaic &lt;dbl&gt;, ## # wind &lt;dbl&gt;, wood_and_wood_derived_fuels &lt;dbl&gt;, all_utility_scale_solar &lt;dbl&gt;, nuclear &lt;dbl&gt;, ## # utility_scale_photovoltaic &lt;dbl&gt;, hydro_electric_pumped_storage &lt;dbl&gt;, petroleum_coke &lt;dbl&gt;, ## # utility_scale_thermal &lt;dbl&gt;, geothermal &lt;dbl&gt; test3 &lt;- test2 test3$state &lt;- NULL find_missing_patterns(test3, &#39;percent&#39;) ## [1] 50 #ggsave(&#39;state-fuel type-missing patterns.png&#39;, height = 10, width = 10, units = &quot;in&quot;) df %&gt;% filter(state == &#39;USA-AL&#39;) %&gt;% ggplot(aes(x = date, y = thousand_megawatthours, color = fuel)) + geom_line() #+ #facet_wrap(~fuel)#, ncol = 1, scales=&quot;free&quot;) #could do a boxplot for each state, or even a cleveland dot plot df %&gt;% filter(state == &#39;USA-CA&#39;) %&gt;% group_by(fuel) %&gt;% mutate(thousand_megawatthours_norm = scale(thousand_megawatthours)) %&gt;% ggplot(aes(x = date, y = thousand_megawatthours_norm)) + facet_wrap(~fuel) + geom_line() df %&gt;% group_by(fuel, date) %&gt;% summarise(thousand_megawatthours = sum(thousand_megawatthours)) %&gt;% filter(fuel %in% c(&#39;all_solar&#39;, &#39;all_utility_scale_solar&#39;, &#39;coal&#39;,&#39;natural_gas&#39;, &#39;wind&#39;)) %&gt;% ggplot(aes(x = date, y = thousand_megawatthours, color = fuel)) + geom_line() Missing values: “all solar” values don’t begin until 2015; however, “all utility scale solar” has values beginning in 2001. The aggregation is off here for the all_utility_scale_solar section df %&gt;% group_by(fuel, date) %&gt;% summarise(thousand_megawatthours = sum(thousand_megawatthours)) %&gt;% filter(fuel %like% &#39;solar&#39;) %&gt;% ggplot(aes(x = date, y = thousand_megawatthours, color = fuel)) + geom_line() for the plots to make sense, need to set the all solar value to be all_utility_scale_solar for the time period before small_scale_solar_photovoltaic had values #df$thousand_megawatthours[df$] look at which fuel sources are correlated df %&gt;% select(c(fuel, date, thousand_megawatthours)) %&gt;% group_by(fuel, date) %&gt;% summarise(thousand_megawatthours = sum(thousand_megawatthours)) %&gt;% ungroup() %&gt;% pivot_wider(names_from=fuel, id_cols = date, values_from = thousand_megawatthours) %&gt;% ggplot(aes(x=all_utility_scale_solar, y = natural_gas)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = FALSE) + ggtitle(&quot;Natural Gas vs. Solar&quot;) + theme(plot.title = element_text(hjust = .5), panel.grid.major = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = &quot;black&quot;)) plot of percent growth for each fuel type over the entire time period - could do this as a cleveland dot plot - should probably make the values annualized before doing the growth values becuase the numbers are seasonal df %&gt;% select(c(fuel, date, thousand_megawatthours)) %&gt;% group_by(fuel, date) %&gt;% summarise(thousand_megawatthours = sum(thousand_megawatthours)) %&gt;% ungroup() %&gt;% pivot_wider(names_from=fuel, id_cols = date, values_from = thousand_megawatthours) %&gt;% ggparcoord(columns=c(array(2:20)), scale= &quot;uniminmax&quot;, alphaLines = .3, splineFactor = 9) + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) comp_df &lt;-df %&gt;% select(c(state, fuel, date, thousand_megawatthours)) %&gt;% group_by(state, fuel, date) %&gt;% summarise(thousand_megawatthours = sum(thousand_megawatthours)) %&gt;% ungroup() %&gt;% pivot_wider(names_from=fuel, id_cols = c(date, state), values_from = thousand_megawatthours) ggparcoord(comp_df, columns=c(array(3:21)), scale= &quot;uniminmax&quot;, alphaLines = .3, splineFactor = 9, groupColumn = &quot;state&quot;) + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) Checking correlation between financial data and amount of energy produced #Why is hydro negative? unique(df$fuel) ## [1] &quot;coal&quot; &quot;petroleum_liquids&quot; &quot;petroleum_coke&quot; ## [4] &quot;natural_gas&quot; &quot;other_gases&quot; &quot;nuclear&quot; ## [7] &quot;conventional_hydroelectric&quot; &quot;other_renewables_(total)&quot; &quot;wind&quot; ## [10] &quot;all_utility_scale_solar&quot; &quot;utility_scale_photovoltaic&quot; &quot;utility_scale_thermal&quot; ## [13] &quot;geothermal&quot; &quot;wood_and_wood_derived_fuels&quot; &quot;other_biomass&quot; ## [16] &quot;hydro_electric_pumped_storage&quot; &quot;other&quot; &quot;all_solar&quot; ## [19] &quot;small_scale_solar_photovoltaic&quot; Strip off USA- from state col and plot them on a map "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
